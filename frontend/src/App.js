import React, { useState } from 'react';

// Language Data
const languages = {
  en: {
    appName: 'Sehat Saathi',
    subtitle: 'Rural Telemedicine Platform',
    selectLanguage: 'Select Language',
    portal: 'Healthcare Portal',
    selectRole: 'Select your role to continue',
    ashaWorker: 'ASHA Worker',
    communityHealth: 'Community Health Worker',
    doctor: 'Doctor',
    medicalPro: 'Medical Professional',
    patient: 'Patient',
    healthSeeker: 'Healthcare Seeker',
    pharmacy: 'Pharmacy',
    medicineProvider: 'Medicine Provider',
    ashaLogin: 'ASHA Login',
    ashaPortal: 'ASHA Portal',
    ashaId: 'ASHA ID',
    password: 'Password',
    enterAshaId: 'Enter your ASHA ID',
    enterPassword: 'Enter password',
    loginButton: 'Login to Portal',
    welcome: 'Welcome',
    logout: 'Logout',
    back: 'Back',
    patientReg: 'Patient Registration',
    regSubtitle: 'Register new patients',
    healthCheckup: 'Health Checkup',
    checkupSubtitle: 'Record symptoms and vitals',
    patientRecords: 'Patient Records',
    recordsSubtitle: 'View patient history',
    doctorConnect: 'Doctor Connect',
    connectSubtitle: 'Video call with doctors',
    medicineTracker: 'Medicine Tracker',
    trackerSubtitle: 'Track prescriptions',
    healthReports: 'Health Reports',
    reportsSubtitle: 'Generate reports'
  },
  hi: {
    appName: '‡§∏‡•á‡§π‡§§ ‡§∏‡§æ‡§•‡•Ä',
    subtitle: '‡§ó‡•ç‡§∞‡§æ‡§Æ‡•Ä‡§£ ‡§ü‡•á‡§≤‡•Ä‡§Æ‡•á‡§°‡§ø‡§∏‡§ø‡§® ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ',
    selectLanguage: '‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç',
    portal: '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤',
    selectRole: '‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•Ä ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç',
    ashaWorker: '‡§Ü‡§∂‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡§∞‡•ç‡§§‡§æ',
    communityHealth: '‡§∏‡§æ‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡§∞‡•ç‡§§‡§æ',
    doctor: '‡§°‡•â‡§ï‡•ç‡§ü‡§∞',
    medicalPro: '‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§™‡•á‡§∂‡•á‡§µ‡§∞',
    patient: '‡§∞‡•ã‡§ó‡•Ä',
    healthSeeker: '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ ‡§ö‡§æ‡§π‡§®‡•á ‡§µ‡§æ‡§≤‡§æ',
    pharmacy: '‡§´‡§æ‡§∞‡•ç‡§Æ‡•á‡§∏‡•Ä',
    medicineProvider: '‡§¶‡§µ‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§§‡§æ',
    ashaLogin: '‡§Ü‡§∂‡§æ ‡§≤‡•â‡§ó‡§ø‡§®',
    ashaPortal: '‡§Ü‡§∂‡§æ ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤',
    ashaId: '‡§Ü‡§∂‡§æ ‡§Ü‡§à‡§°‡•Ä',
    password: '‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°',
    enterAshaId: '‡§Ö‡§™‡§®‡§æ ‡§Ü‡§∂‡§æ ‡§Ü‡§à‡§°‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç',
    enterPassword: '‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç',
    loginButton: '‡§™‡•ã‡§∞‡•ç‡§ü‡§≤ ‡§Æ‡•á‡§Ç ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç',
    welcome: '‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à',
    logout: '‡§≤‡•â‡§ó‡§Ü‡§â‡§ü',
    back: '‡§µ‡§æ‡§™‡§∏',
    patientReg: '‡§∞‡•ã‡§ó‡•Ä ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£',
    regSubtitle: '‡§®‡§è ‡§∞‡•ã‡§ó‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§™‡§Ç‡§ú‡•Ä‡§ï‡•É‡§§ ‡§ï‡§∞‡•á‡§Ç',
    healthCheckup: '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§Ç‡§ö',
    checkupSubtitle: '‡§≤‡§ï‡•ç‡§∑‡§£ ‡§î‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡•á‡§Ç',
    patientRecords: '‡§∞‡•ã‡§ó‡•Ä ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°',
    recordsSubtitle: '‡§∞‡•ã‡§ó‡•Ä ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç',
    doctorConnect: '‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡§®‡•á‡§ï‡•ç‡§ü',
    connectSubtitle: '‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡•â‡§≤',
    medicineTracker: '‡§¶‡§µ‡§æ ‡§ü‡•ç‡§∞‡•à‡§ï‡§∞',
    trackerSubtitle: '‡§®‡•Å‡§∏‡•ç‡§ñ‡•á ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç',
    healthReports: '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü',
    reportsSubtitle: '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç'
  },
  pa: {
    appName: '‡®∏‡©á‡®π‡®§ ‡®∏‡®æ‡®•‡©Ä',
    subtitle: '‡®™‡®ø‡©∞‡®°‡©Ä ‡®ü‡©à‡®≤‡©Ä‡®Æ‡©à‡®°‡®ø‡®∏‡®ø‡®® ‡®™‡®≤‡©à‡®ü‡®´‡®æ‡®∞‡®Æ',
    selectLanguage: '‡®≠‡®æ‡®∏‡®º‡®æ ‡®ö‡©Å‡®£‡©ã',
    portal: '‡®∏‡®ø‡®π‡®§ ‡®™‡©ã‡®∞‡®ü‡®≤',
    selectRole: '‡®ú‡®æ‡®∞‡©Ä ‡®∞‡©±‡®ñ‡®£ ‡®≤‡®à ‡®Ü‡®™‡®£‡©Ä ‡®≠‡©Ç‡®Æ‡®ø‡®ï‡®æ ‡®ö‡©Å‡®£‡©ã',
    ashaWorker: '‡®Ü‡®∏‡®º‡®æ ‡®µ‡®∞‡®ï‡®∞',
    communityHealth: '‡®ï‡®Æ‡®ø‡®ä‡®®‡®ø‡®ü‡©Ä ‡®π‡©à‡®≤‡®• ‡®µ‡®∞‡®ï‡®∞',
    doctor: '‡®°‡®æ‡®ï‡®ü‡®∞',
    medicalPro: '‡®Æ‡©à‡®°‡©Ä‡®ï‡®≤ ‡®™‡©ç‡®∞‡©ã‡®´‡©à‡®∏‡®º‡®®‡®≤',
    patient: '‡®Æ‡®∞‡©Ä‡®ú‡®º',
    healthSeeker: '‡®∏‡®ø‡®π‡®§ ‡®∏‡©á‡®µ‡®æ ‡®ö‡®æ‡®π‡©Å‡©∞‡®¶‡®æ',
    pharmacy: '‡®´‡®æ‡®∞‡®Æ‡©á‡®∏‡©Ä',
    medicineProvider: '‡®¶‡®µ‡®æ‡®à ‡®™‡©ç‡®∞‡®¶‡®æ‡®§‡®æ',
    ashaLogin: '‡®Ü‡®∏‡®º‡®æ ‡®≤‡®æ‡®ó‡®á‡®®',
    ashaPortal: '‡®Ü‡®∏‡®º‡®æ ‡®™‡©ã‡®∞‡®ü‡®≤',
    ashaId: '‡®Ü‡®∏‡®º‡®æ ‡®Ü‡®à‡®°‡©Ä',
    password: '‡®™‡®æ‡®∏‡®µ‡®∞‡®°',
    enterAshaId: '‡®Ü‡®™‡®£‡©Ä ‡®Ü‡®∏‡®º‡®æ ‡®Ü‡®à‡®°‡©Ä ‡®¶‡®æ‡®ñ‡®≤ ‡®ï‡®∞‡©ã',
    enterPassword: '‡®™‡®æ‡®∏‡®µ‡®∞‡®° ‡®¶‡®æ‡®ñ‡®≤ ‡®ï‡®∞‡©ã',
    loginButton: '‡®™‡©ã‡®∞‡®ü‡®≤ ‡®µ‡®ø‡©±‡®ö ‡®≤‡®æ‡®ó‡®á‡®® ‡®ï‡®∞‡©ã',
    welcome: '‡®∏‡©Å‡®Ü‡®ó‡®§ ‡®π‡©à',
    logout: '‡®≤‡®æ‡®ó‡®Ü‡®â‡®ü',
    back: '‡®µ‡®æ‡®™‡®∏',
    patientReg: '‡®Æ‡®∞‡©Ä‡®ú‡®º ‡®∞‡®ú‡®ø‡®∏‡®ü‡©ç‡®∞‡©á‡®∏‡®º‡®®',
    regSubtitle: '‡®®‡®µ‡©á‡®Ç ‡®Æ‡®∞‡©Ä‡®ú‡®º‡®æ‡®Ç ‡®®‡©Ç‡©∞ ‡®∞‡®ú‡®ø‡®∏‡®ü‡®∞ ‡®ï‡®∞‡©ã',
    healthCheckup: '‡®∏‡®ø‡®π‡®§ ‡®ú‡®æ‡®Ç‡®ö',
    checkupSubtitle: '‡®≤‡©±‡®õ‡®£ ‡®Ö‡®§‡©á ‡®µ‡©á‡®∞‡®µ‡©á ‡®∞‡®ø‡®ï‡®æ‡®∞‡®° ‡®ï‡®∞‡©ã',
    patientRecords: '‡®Æ‡®∞‡©Ä‡®ú‡®º ‡®∞‡®ø‡®ï‡®æ‡®∞‡®°',
    recordsSubtitle: '‡®Æ‡®∞‡©Ä‡®ú‡®º ‡®á‡®§‡®ø‡®π‡®æ‡®∏ ‡®¶‡©á‡®ñ‡©ã',
    doctorConnect: '‡®°‡®æ‡®ï‡®ü‡®∞ ‡®ï‡®®‡©à‡®ï‡®ü',
    connectSubtitle: '‡®°‡®æ‡®ï‡®ü‡®∞‡®æ‡®Ç ‡®®‡®æ‡®≤ ‡®µ‡©Ä‡®°‡©Ä‡®ì ‡®ï‡®æ‡®≤',
    medicineTracker: '‡®¶‡®µ‡®æ‡®à ‡®ü‡©ç‡®∞‡©à‡®ï‡®∞',
    trackerSubtitle: '‡®®‡©Å‡®∏‡®ñ‡©á ‡®ü‡©ç‡®∞‡©à‡®ï ‡®ï‡®∞‡©ã',
    healthReports: '‡®∏‡®ø‡®π‡®§ ‡®∞‡®ø‡®™‡©ã‡®∞‡®ü‡®æ‡®Ç',
    reportsSubtitle: '‡®∞‡®ø‡®™‡©ã‡®∞‡®ü‡®æ‡®Ç ‡®§‡®ø‡®Ü‡®∞ ‡®ï‡®∞‡©ã'
  }
};

// Back Button Component
const BackButton = ({ onBack }) => (
  <button
    onClick={onBack}
    style={{
      position: 'absolute',
      top: '30px',
      left: '30px',
      background: 'rgba(255,255,255,0.2)',
      color: 'white',
      border: '2px solid rgba(255,255,255,0.3)',
      borderRadius: '50px',
      padding: '12px 20px',
      cursor: 'pointer',
      fontSize: '16px',
      fontWeight: '600',
      display: 'flex',
      alignItems: 'center',
      gap: '8px',
      transition: 'all 0.3s ease'
    }}
    onMouseOver={(e) => {
      e.target.style.background = 'rgba(255,255,255,0.3)';
      e.target.style.transform = 'translateX(-5px)';
    }}
    onMouseOut={(e) => {
      e.target.style.background = 'rgba(255,255,255,0.2)';
      e.target.style.transform = 'translateX(0px)';
    }}
  >
    ‚Üê Back
  </button>
);

// Language Screen Component
const LanguageScreen = ({ onSelectLanguage }) => (
  <div style={{
    minHeight: '100vh',
    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontFamily: 'Arial, sans-serif',
    padding: '20px'
  }}>
    <div style={{
      background: 'white',
      padding: '60px 50px',
      borderRadius: '25px',
      boxShadow: '0 20px 50px rgba(0,0,0,0.15)',
      textAlign: 'center',
      maxWidth: '500px',
      width: '100%'
    }}>
      <h1 style={{ fontSize: '48px', margin: '0 0 10px 0', color: '#2c3e50' }}>üè•</h1>
      <h2 style={{ color: '#2c3e50', margin: '0 0 15px 0', fontSize: '32px', fontWeight: '700' }}>
        Sehat Saathi
      </h2>
      <p style={{ color: '#7f8c8d', margin: '0 0 40px 0', fontSize: '18px' }}>
        Select Language / ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç / ‡®≠‡®æ‡®∏‡®º‡®æ ‡®ö‡©Å‡®£‡©ã
      </p>
      
      <div style={{ display: 'grid', gap: '15px' }}>
        {[
          { code: 'pa', name: '‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä', flag: 'üáÆüá≥' },
          { code: 'hi', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
          { code: 'en', name: 'English', flag: 'üá¨üáß' }
        ].map(lang => (
          <button
            key={lang.code}
            onClick={() => onSelectLanguage(lang.code)}
            style={{
              padding: '20px',
              background: 'linear-gradient(135deg, #3498db 0%, #2980b9 100%)',
              color: 'white',
              border: 'none',
              borderRadius: '15px',
              fontSize: '20px',
              fontWeight: '600',
              cursor: 'pointer',
              transition: 'all 0.3s ease'
            }}
            onMouseOver={(e) => e.target.style.transform = 'translateY(-3px)'}
            onMouseOut={(e) => e.target.style.transform = 'translateY(0px)'}
          >
            {lang.flag} {lang.name}
          </button>
        ))}
      </div>
    </div>
  </div>
);

// Role Selection Screen
const RoleScreen = ({ onSelectRole, onBack, lang }) => {
  const t = languages[lang] || languages.en;
  
  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      padding: '20px',
      fontFamily: 'Arial, sans-serif',
      position: 'relative'
    }}>
      <BackButton onBack={onBack} />
      
      <div style={{ textAlign: 'center', padding: '40px 0' }}>
        <h1 style={{ color: 'white', fontSize: '36px', fontWeight: '700', margin: '0 0 15px 0' }}>
          {t.portal}
        </h1>
        <p style={{ color: 'rgba(255,255,255,0.8)', fontSize: '18px', margin: '0 0 50px 0' }}>
          {t.selectRole}
        </p>
      </div>
      
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
        gap: '30px',
        maxWidth: '1000px',
        margin: '0 auto'
      }}>
        {[
          { icon: 'üë©‚Äç‚öïÔ∏è', title: t.ashaWorker, subtitle: t.communityHealth, role: 'asha' },
          { icon: 'üë®‚Äç‚öïÔ∏è', title: t.doctor, subtitle: t.medicalPro, role: 'doctor' },
          { icon: 'üë§', title: t.patient, subtitle: t.healthSeeker, role: 'patient' },
          { icon: 'üíä', title: t.pharmacy, subtitle: t.medicineProvider, role: 'pharmacy' }
        ].map(item => (
          <div
            key={item.role}
            onClick={() => onSelectRole(item.role)}
            style={{
              background: 'white',
              padding: '40px 30px',
              borderRadius: '20px',
              textAlign: 'center',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              boxShadow: '0 15px 35px rgba(0,0,0,0.1)'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.transform = 'translateY(-10px)';
              e.currentTarget.style.boxShadow = '0 25px 50px rgba(0,0,0,0.15)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.transform = 'translateY(0px)';
              e.currentTarget.style.boxShadow = '0 15px 35px rgba(0,0,0,0.1)';
            }}
          >
            <div style={{ fontSize: '80px', marginBottom: '20px' }}>{item.icon}</div>
            <h3 style={{ color: '#2c3e50', fontSize: '24px', fontWeight: '700', margin: '0 0 10px 0' }}>
              {item.title}
            </h3>
            <p style={{ color: '#7f8c8d', fontSize: '16px', margin: 0 }}>
              {item.subtitle}
            </p>
          </div>
        ))}
      </div>
    </div>
  );
};

// ASHA Login Screen
const ASHALogin = ({ onLogin, onBack, lang }) => {
  const [credentials, setCredentials] = useState({ ashaId: '', password: '' });
  const t = languages[lang] || languages.en;

  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      fontFamily: 'Arial, sans-serif',
      padding: '20px',
      position: 'relative'
    }}>
      <BackButton onBack={onBack} />
      
      <div style={{
        background: 'white',
        padding: '50px 40px',
        borderRadius: '25px',
        boxShadow: '0 20px 50px rgba(0,0,0,0.15)',
        width: '100%',
        maxWidth: '450px'
      }}>
        <div style={{ textAlign: 'center', marginBottom: '40px' }}>
          <h2 style={{ color: '#2c3e50', fontSize: '32px', fontWeight: '700', margin: '0 0 10px 0' }}>
            üë©‚Äç‚öïÔ∏è {t.ashaLogin}
          </h2>
          <p style={{ color: '#7f8c8d', fontSize: '16px', margin: 0 }}>
            {t.communityHealth}
          </p>
        </div>

        <form onSubmit={(e) => {
          e.preventDefault();
          if (credentials.ashaId && credentials.password) {
            onLogin({ name: `ASHA ${credentials.ashaId}`, role: 'asha' });
          }
        }}>
          <div style={{ marginBottom: '25px' }}>
            <label style={{ display: 'block', marginBottom: '8px', color: '#2c3e50', fontWeight: '600' }}>
              {t.ashaId}
            </label>
            <input
              type="text"
              placeholder={t.enterAshaId}
              value={credentials.ashaId}
              onChange={(e) => setCredentials({ ...credentials, ashaId: e.target.value })}
              style={{
                width: '100%',
                padding: '15px',
                border: '2px solid #ecf0f1',
                borderRadius: '12px',
                fontSize: '16px',
                boxSizing: 'border-box',
                outline: 'none'
              }}
              required
            />
          </div>

          <div style={{ marginBottom: '30px' }}>
            <label style={{ display: 'block', marginBottom: '8px', color: '#2c3e50', fontWeight: '600' }}>
              {t.password}
            </label>
            <input
              type="password"
              placeholder={t.enterPassword}
              value={credentials.password}
              onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}
              style={{
                width: '100%',
                padding: '15px',
                border: '2px solid #ecf0f1',
                borderRadius: '12px',
                fontSize: '16px',
                boxSizing: 'border-box',
                outline: 'none'
              }}
              required
            />
          </div>

          <button
            type="submit"
            style={{
              width: '100%',
              padding: '18px',
              background: 'linear-gradient(135deg, #3498db 0%, #2980b9 100%)',
              color: 'white',
              border: 'none',
              borderRadius: '12px',
              fontSize: '18px',
              fontWeight: '700',
              cursor: 'pointer',
              transition: 'transform 0.2s ease'
            }}
            onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'}
            onMouseOut={(e) => e.target.style.transform = 'translateY(0px)'}
          >
            {t.loginButton}
          </button>
        </form>
      </div>
    </div>
  );
};

// Health Checkup Screen
const HealthCheckup = ({ onBack, onSubmit }) => {
  const [step, setStep] = useState(1);
  const [patientInfo, setPatientInfo] = useState({
    name: '',
    age: '',
    gender: ''
  });
  const [symptoms, setSymptoms] = useState([]);
  const [vitals, setVitals] = useState({
    temperature: '',
    bloodPressure: '',
    heartRate: ''
  });

  const symptomsList = [
    '‡§¨‡•Å‡§ñ‡§æ‡§∞ / Fever',
    '‡§ñ‡§æ‡§Ç‡§∏‡•Ä / Cough', 
    '‡§∏‡§æ‡§Ç‡§∏ ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡§†‡§ø‡§®‡§æ‡§à / Breathing Problem',
    '‡§õ‡§æ‡§§‡•Ä ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§¶ / Chest Pain',
    '‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶ / Headache',
    '‡§ú‡•Ä ‡§Æ‡§ø‡§ö‡§≤‡§æ‡§®‡§æ / Nausea'
  ];

  const handleSubmit = () => {
    onSubmit({ patient: patientInfo, symptoms, vitals });
  };

  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      padding: '20px',
      fontFamily: 'Arial, sans-serif'
    }}>
      <button onClick={onBack} style={{
        position: 'absolute',
        top: '20px',
        left: '20px',
        background: 'rgba(255,255,255,0.2)',
        color: 'white',
        border: 'none',
        padding: '10px 20px',
        borderRadius: '25px',
        cursor: 'pointer'
      }}>
        ‚Üê Back
      </button>

      <div style={{ maxWidth: '600px', margin: '0 auto', paddingTop: '60px' }}>
        {step === 1 && (
          <div style={{
            background: 'white',
            padding: '40px',
            borderRadius: '20px',
            boxShadow: '0 10px 25px rgba(0,0,0,0.1)'
          }}>
            <h2 style={{ textAlign: 'center', marginBottom: '30px' }}>üë§ Patient Information</h2>
            
            <input
              type="text"
              placeholder="Patient Name / ‡§Æ‡§∞‡•Ä‡§ú ‡§ï‡§æ ‡§®‡§æ‡§Æ"
              value={patientInfo.name}
              onChange={(e) => setPatientInfo({...patientInfo, name: e.target.value})}
              style={{
                width: '100%',
                padding: '15px',
                marginBottom: '15px',
                border: '2px solid #ecf0f1',
                borderRadius: '10px',
                fontSize: '16px',
                boxSizing: 'border-box'
              }}
            />

            <input
              type="number"
              placeholder="Age / ‡§â‡§Æ‡•ç‡§∞"
              value={patientInfo.age}
              onChange={(e) => setPatientInfo({...patientInfo, age: e.target.value})}
              style={{
                width: '100%',
                padding: '15px',
                marginBottom: '15px',
                border: '2px solid #ecf0f1',
                borderRadius: '10px',
                fontSize: '16px',
                boxSizing: 'border-box'
              }}
            />

            <select
              value={patientInfo.gender}
              onChange={(e) => setPatientInfo({...patientInfo, gender: e.target.value})}
              style={{
                width: '100%',
                padding: '15px',
                marginBottom: '25px',
                border: '2px solid #ecf0f1',
                borderRadius: '10px',
                fontSize: '16px',
                boxSizing: 'border-box'
              }}
            >
              <option value="">Select Gender / ‡§≤‡§ø‡§Ç‡§ó ‡§ö‡•Å‡§®‡•á‡§Ç</option>
              <option value="male">Male / ‡§™‡•Å‡§∞‡•Å‡§∑</option>
              <option value="female">Female / ‡§Æ‡§π‡§ø‡§≤‡§æ</option>
            </select>

            <button onClick={() => setStep(2)} style={{
              width: '100%',
              padding: '15px',
              background: '#3498db',
              color: 'white',
              border: 'none',
              borderRadius: '10px',
              fontSize: '18px',
              cursor: 'pointer'
            }}>
              Next: Select Symptoms ‚Üí
            </button>
          </div>
        )}

        {step === 2 && (
          <div style={{
            background: 'white',
            padding: '40px',
            borderRadius: '20px',
            boxShadow: '0 10px 25px rgba(0,0,0,0.1)'
          }}>
            <h2 style={{ textAlign: 'center', marginBottom: '30px' }}>ü©∫ Select Symptoms</h2>
            
            <div style={{ marginBottom: '30px' }}>
              {symptomsList.map((symptom, index) => (
                <label key={index} style={{
                  display: 'block',
                  padding: '15px',
                  marginBottom: '10px',
                  border: '2px solid #ecf0f1',
                  borderRadius: '10px',
                  cursor: 'pointer'
                }}>
                  <input
                    type="checkbox"
                    checked={symptoms.includes(symptom)}
                    onChange={(e) => {
                      if (e.target.checked) {
                        setSymptoms([...symptoms, symptom]);
                      } else {
                        setSymptoms(symptoms.filter(s => s !== symptom));
                      }
                    }}
                    style={{ marginRight: '10px' }}
                  />
                  {symptom}
                </label>
              ))}
            </div>

            <div style={{ display: 'flex', gap: '10px' }}>
              <button onClick={() => setStep(1)} style={{
                flex: 1,
                padding: '15px',
                background: '#95a5a6',
                color: 'white',
                border: 'none',
                borderRadius: '10px',
                cursor: 'pointer'
              }}>
                ‚Üê Previous
              </button>
              <button onClick={() => setStep(3)} style={{
                flex: 2,
                padding: '15px',
                background: '#3498db',
                color: 'white',
                border: 'none',
                borderRadius: '10px',
                cursor: 'pointer'
              }}>
                Next: Record Vitals ‚Üí
              </button>
            </div>
          </div>
        )}

        {step === 3 && (
          <div style={{
            background: 'white',
            padding: '40px',
            borderRadius: '20px',
            boxShadow: '0 10px 25px rgba(0,0,0,0.1)'
          }}>
            <h2 style={{ textAlign: 'center', marginBottom: '30px' }}>üìä Record Vitals</h2>
            
            <input
              type="number"
              placeholder="Temperature (¬∞F) / ‡§§‡§æ‡§™‡§Æ‡§æ‡§®"
              value={vitals.temperature}
              onChange={(e) => setVitals({...vitals, temperature: e.target.value})}
              style={{
                width: '100%',
                padding: '15px',
                marginBottom: '15px',
                border: '2px solid #ecf0f1',
                borderRadius: '10px',
                fontSize: '16px',
                boxSizing: 'border-box'
              }}
            />

            <input
              type="text"
              placeholder="Blood Pressure / ‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™ (120/80)"
              value={vitals.bloodPressure}
              onChange={(e) => setVitals({...vitals, bloodPressure: e.target.value})}
              style={{
                width: '100%',
                padding: '15px',
                marginBottom: '15px',
                border: '2px solid #ecf0f1',
                borderRadius: '10px',
                fontSize: '16px',
                boxSizing: 'border-box'
              }}
            />

            <input
              type="number"
              placeholder="Heart Rate / ‡§π‡•É‡§¶‡§Ø ‡§ó‡§§‡§ø"
              value={vitals.heartRate}
              onChange={(e) => setVitals({...vitals, heartRate: e.target.value})}
              style={{
                width: '100%',
                padding: '15px',
                marginBottom: '25px',
                border: '2px solid #ecf0f1',
                borderRadius: '10px',
                fontSize: '16px',
                boxSizing: 'border-box'
              }}
            />

            <div style={{ display: 'flex', gap: '10px' }}>
              <button onClick={() => setStep(2)} style={{
                flex: 1,
                padding: '15px',
                background: '#95a5a6',
                color: 'white',
                border: 'none',
                borderRadius: '10px',
                cursor: 'pointer'
              }}>
                ‚Üê Previous
              </button>
              <button onClick={handleSubmit} style={{
                flex: 2,
                padding: '15px',
                background: '#27ae60',
                color: 'white',
                border: 'none',
                borderRadius: '10px',
                fontSize: '18px',
                fontWeight: '600',
                cursor: 'pointer'
              }}>
                Complete Checkup ‚úì
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// ASHA Dashboard
const ASHADashboard = ({ user, onLogout, lang, setCurrentScreen }) => {
  const t = languages[lang] || languages.en;

  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      padding: '20px',
      fontFamily: 'Arial, sans-serif'
    }}>
      <header style={{
        background: 'white',
        padding: '25px 30px',
        borderRadius: '20px',
        marginBottom: '30px',
        boxShadow: '0 10px 25px rgba(0,0,0,0.1)',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center'
      }}>
        <h1 style={{ color: '#2c3e50', fontSize: '32px', fontWeight: '700', margin: 0 }}>
          üë©‚Äç‚öïÔ∏è {t.ashaPortal}
        </h1>
        <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>
          <span style={{ color: '#2c3e50', fontWeight: '600' }}>
            {t.welcome}, {user?.name}
          </span>
          <button
            onClick={onLogout}
            style={{
              padding: '12px 24px',
              background: '#e74c3c',
              color: 'white',
              border: 'none',
              borderRadius: '10px',
              cursor: 'pointer',
              fontWeight: '600'
            }}
          >
            {t.logout}
          </button>
        </div>
      </header>

      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
        gap: '25px',
        maxWidth: '1200px',
        margin: '0 auto'
      }}>
        {[
          { icon: 'üë§', title: t.patientReg, subtitle: t.regSubtitle, onClick: () => alert(`${t.patientReg} - Coming Soon!`) },
          { icon: 'ü©∫', title: t.healthCheckup, subtitle: t.checkupSubtitle, onClick: () => setCurrentScreen('healthCheckup') },
          { icon: 'üìã', title: t.patientRecords, subtitle: t.recordsSubtitle, onClick: () => alert(`${t.patientRecords} - Coming Soon!`) },
          { icon: 'üè•', title: t.doctorConnect, subtitle: t.connectSubtitle, onClick: () => alert(`${t.doctorConnect} - Coming Soon!`) },
          { icon: 'üíä', title: t.medicineTracker, subtitle: t.trackerSubtitle, onClick: () => alert(`${t.medicineTracker} - Coming Soon!`) },
          { icon: 'üìä', title: t.healthReports, subtitle: t.reportsSubtitle, onClick: () => alert(`${t.healthReports} - Coming Soon!`) }
        ].map((card, index) => (
          <div
            key={index}
            onClick={card.onClick}
            style={{
              background: 'white',
              padding: '35px 30px',
              borderRadius: '20px',
              textAlign: 'center',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              boxShadow: '0 10px 25px rgba(0,0,0,0.1)'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.transform = 'translateY(-8px)';
              e.currentTarget.style.boxShadow = '0 20px 40px rgba(0,0,0,0.15)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.transform = 'translateY(0px)';
              e.currentTarget.style.boxShadow = '0 10px 25px rgba(0,0,0,0.1)';
            }}
          >
            <div style={{ fontSize: '60px', marginBottom: '20px' }}>{card.icon}</div>
            <h3 style={{ color: '#2c3e50', fontSize: '22px', fontWeight: '700', margin: '15px 0 10px 0' }}>
              {card.title}
            </h3>
            <p style={{ color: '#7f8c8d', fontSize: '16px', margin: 0 }}>
              {card.subtitle}
            </p>
          </div>
        ))}
      </div>
    </div>
  );
};

// Main App Component
function App() {
  const [language, setLanguage] = useState(null);
  const [role, setRole] = useState(null);
  const [user, setUser] = useState(null);
  const [currentScreen, setCurrentScreen] = useState('dashboard');
  const [patientData, setPatientData] = useState(null);

  // Language Selection
  if (!language) {
    return <LanguageScreen onSelectLanguage={setLanguage} />;
  }

  // Role Selection
  if (!role) {
    return <RoleScreen 
      onSelectRole={(selectedRole) => {
        setRole(selectedRole);
        if (selectedRole !== 'asha') {
          alert(`${selectedRole} portal coming soon!`);
          setRole(null);
        }
      }}
      onBack={() => setLanguage(null)}
      lang={language}
    />;
  }

  // ASHA Login
  if (role === 'asha' && !user) {
    return <ASHALogin 
      onLogin={setUser} 
      onBack={() => setRole(null)}
      lang={language}
    />;
  }

  // Health Checkup Screen
  if (currentScreen === 'healthCheckup') {
    return (
      <HealthCheckup 
        onBack={() => setCurrentScreen('dashboard')}
        onSubmit={(data) => {
          console.log('Health Checkup Data:', data);
          setPatientData(data);
          alert('Health checkup completed successfully!');
          setCurrentScreen('dashboard');
        }}
      />
    );
  }

  // ASHA Dashboard
  if (user && role === 'asha') {
    return <ASHADashboard 
      user={user} 
      onLogout={() => {
        setUser(null);
        setRole(null);
        setLanguage(null);
        setCurrentScreen('dashboard');
      }}
      setCurrentScreen={setCurrentScreen}
      lang={language}
    />;
  }

  return <div>Loading...</div>;
}

export default App;
